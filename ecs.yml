---
- name: ECS Example | Provision all required infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  roles:
    # Provision networking
    - {
        role: aws-vpc,
        vpc_name: "{{ my_vpc_name }}",
        vpc_region: "{{ my_vpc_region }}",
        vpc_cidr_block: "{{ my_vpc_cidr_block }}",
        vpc_subnets: "{{ my_vpc_subnets }}",
        public_subnet_routes: "{{ my_public_subnet_routes }}"
      }

    # Provision security groups
    - {
        role: aws-security-groups,
        vpc_region: "{{ my_vpc_region }}",
        vpc_id: "{{ vpc.vpc_id }}",
        ec2_group_inbound_sg: "{{ inbound_security_groups }}",
        ec2_group_outbound_sg: "{{ outbound_security_groups }}"
      }

    # Provision ECS with auto scaling EC2 instances
    - {
        role: aws-ecs-autoscale,
        ecs_cluster_name: "{{ my_ecs_cluster_name }}",
        ec2_security_groups: [
          "{{ ec2_group_inbound_sg.results[0].group_id }}",
          "{{ ec2_group_inbound_sg.results[1].group_id }}",
          "{{ ec2_group_outbound_sg.results[0].group_id }}"
          ],
        ec2_asg_availability_zones: [
          "{{ subnet_ecscluster_az_1 }}",
          "{{ subnet_ecscluster_az_2 }}"
          ],
        ec2_asg_vpc_subnets: [
          "{{ vpc.subnets[0].id }}",
          "{{ vpc.subnets[1].id }}"
          ],
        ec2_asg_tags: "{{ ec2_tags }}",
        vpc_name: "{{ my_vpc_name }}"
      }

    # Provision an ELB
    - {
        role: aws-elb,
        elb_name: "{{ my_elb_name }}",
        vpc_name: "{{ my_vpc_name }}",
        elb_security_groups: [
          "{{ ec2_group_inbound_sg.results[0].group_id }}"
          ],
        elb_region: "{{ my_elb_region }}",
        elb_subnets: [
           "{{ vpc.subnets[0].id }}",
           "{{ vpc.subnets[1].id }}"
         ]
      }

- name: ECS Example | Configure and run an example Docker container
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    # Task Definition: A description of an application that contains one or more container definitions
    - name: "ECS | Describe the application as a task definition"
      ecs_taskdefinition:
        containers:
          - name: simple-app
            cpu: 10
            essential: true
            image: "httpd:2.4"
            memory: 300
            mountPoints:
              - containerPath: /usr/local/apache2/htdocs
                sourceVolume: my-vol
            portMappings:
              - containerPort: 80
                hostPort: 80

          - name: busybox
            command:
              - "/bin/sh -c \"while true; do echo '<html> <head> <title>Amazon ECS Sample App</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now running on a container in Amazon ECS.</p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html ; sleep 1; done\""
            cpu: 10
            entryPoint:
              - sh
              - "-c"
            essential: false
            image: busybox
            memory: 200
            volumesFrom:
              - sourceContainer: simple-app
        volumes:
          - name: my-vol
        family: "{{ my_ecs_task_definition_family }}"
        state: present
      register: ecs_taskdefinition_output
     
     
    - name: define service task
      ecs_service:
         state: present
         name: ecs_test
         cluster: "{{ my_ecs_cluster_name }}"
         task_definition: '{{ my_ecs_task_definition_family }}:{{ my_ecs_service_version }}'
         desired_count: "{{ my_ecs_task_definition_count }}" 
#         role: "{{ my_ecs_iam_role }}"
#         load_balancers:
#          - loadBalancerName: "{{ my_elb_name }}"
#            containerName: "simple-app"
#            containerPort: 80



